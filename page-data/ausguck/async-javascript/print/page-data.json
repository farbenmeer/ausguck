{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/ausguck/async-javascript/print","result":{"data":{"deck":{"id":"87f37577-83a1-5997-bead-9b527887c708","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = customTheme;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Head = makeShortcode(\"Head\");\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    mdxType: \"Head\"\n  }, mdx(\"title\", null, \"Async Javascript\"), mdx(\"meta\", {\n    name: \"author\",\n    content: \"Henrik Wenz\"\n  })), mdx(\"h1\", null, \"Async Javascript\"), mdx(\"p\", null, \"by Henrik Wenz\\n(\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://twitter.com/HenrikWenz\"\n  }, \"twitter\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/HaNdTriX\"\n  }, \"github\"), \")\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Asynchrony, in computer programming, refers to the occurrence of events independent of the main program flow and ways to deal with such events.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Callbacks\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log('foo')\\nsetTimeout(() => {\\n  console.log('bar')\\n})\\nconsole.log('baz')\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Callbacks - Conventions (node.js)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const callback = (error, result) => {\\n  if (error) {\\n    // Handle error\\n    return\\n  }\\n  // Handle result\\n}\\ndoSomethingAsync(param1, callback)\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Callbacks - Conventions (node.js)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const fs = require('fs')\\nfs.readFile('/etc/passwd', (err, data) => {\\n  if (err) throw err;\\n  console.log(data);\\n});\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"Asynchronous JavaScript, or JavaScript that uses callbacks, is hard to get right intuitively. A lot of code ends up looking like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"setTimeout(() => {\\n  console.log('1sec passed')\\n  setTimeout(() => {\\n    console.log('2sec passed')\\n    setTimeout(() => {\\n      console.log('3sec passed')\\n      setTimeout(() => {\\n        console.log('4sec passed')\\n        setTimeout(() => {\\n          console.log('4sec passed')\\n        }, 1000)\\n      }, 1000)\\n    }, 1000)\\n  }, 1000)\\n}, 1000)\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Promises were introduced to help!\"), mdx(\"hr\", null), mdx(\"h1\", null, \"The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Creating a promise\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const myPromise = new Promise(function(resolve, reject) {\\n\\n});\\n\\n// => { /* promise object */ }\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Resolving a promise\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const myPromise = new Promise(function(resolve, reject) {\\n  resolve('fooo')\\n});\\n\\nmyPromise.then((result) => {\\n  console.log(result)\\n})\\n\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Rejecting a promise\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const myPromise = new Promise(function(resolve, reject) {\\n  reject(new Error('omg something went wrong'))\\n});\\n\\nmyPromise.catch((error) => {\\n  console.log('error')\\n})\\n\\n// => { /* promise object */ }\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Converting a callback function to an promise (async) function\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const fs = require('fs')\\nfs.readFile('/etc/passwd', (err, data) => {\\n  if (err) throw err;\\n  console.log(data);\\n});\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Converting a callback function to an promise (async) function\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const fs = require('fs')\\n\\nfunction readFileAsync(argument) {\\n  return new Promise((resolve, reject) => {\\n    fs.readFile('/etc/passwd', (err, data) => {\\n      if (err) {\\n        return reject(error)\\n      } else {\\n        return resolve(data)\\n      }\\n    });\\n  })\\n}\\n\\nreadFileAsync('./somepath')\\n  .then((data) => {\\n    console.log(data)\\n  })\\n  .catch((error) => {\\n    console.error(error)\\n  })\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"promisify\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function promisify (targetFunc) {\\n  return (...args) => {\\n    return new Promise((resolve, reject) => {\\n      targetFunc(...args, (error, result) => {\\n        if (error) {\\n          error(error)\\n        }\\n        resolve(result)\\n      })\\n    })\\n  }\\n\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Why are promises better than callbacks?????\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Promises flatten itself\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"Promise.resolve().then(() => {\\n  return Promise.resolve().then(() => {\\n    return 'foo'\\n  })\\n})\\n\\n// => 'foo'\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Async Await\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"async function foo () {\\n  return 'foo'\\n}\\n\")), mdx(\"p\", null, \"same as\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function foo () {\\n  return new Promise((resolve, reject) => {\\n    resolve('foo')\\n  })\\n}\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Implementing a sleep function\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function sleep(ms) {\\n  return new Promise((resolve) => {\\n    setTimeout(() => {\\n      resolve()\\n    }, ms)\\n  })\\n}\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Using a sleep function\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"(async () => {\\n  console.log('1sec passed')\\n  await sleep(1000)\\n  console.log('2sec passed')\\n  await sleep(1000)\\n  console.log('3sec passed')\\n  await sleep(1000)\\n  console.log('4sec passed')\\n  await sleep(1000)\\n  console.log('5sec passed')\\n  await sleep(1000)\\n})()\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Concurrency with async await\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"(async () => {\\n  await Promise.all([\\n    someAsyncTask(),\\n    someAsyncTask(),\\n    someAsyncTask(),\\n    someAsyncTask()\\n  ])()\\n  console.log('done')\\n})\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Good to know\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const {promisify} = require('util');\\nconst fs = require('fs');\\nconst readFileAsync = promisify(fs.readFile);\\n\\n(async () => {\\n  try {\\n    var data = await readFileAsync('./path', 'utf8')\\n  } catch (error) {\\n    console.error(error)\\n  }\\n\\n  console.log(data)\\n})()\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Future\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const fs = require('fs')\\n\\n(async () => {\\n  var data = await fs.promise.readFile('./path', 'utf8')\\n  console.log(data)\\n})()\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Bad things about promises\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Promises are a bit slower than callbacks.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can`t cancel a promise\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Promise can only resolve once\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Observables an other day!\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Docs\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\n  }, \"https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Promise\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://medium.com/@colinmackenzie14/async-await-iffy-96c25e06be6f\"\n  }, \"https://medium.com/@colinmackenzie14/async-await-iffy-96c25e06be6f\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://javascript.info/async-await\"\n  }, \"https://javascript.info/async-await\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://2ality.com/2017/05/util-promisify.html\"\n  }, \"http://2ality.com/2017/05/util-promisify.html\"))));\n}\n;\nMDXContent.isMDXComponent = true;","title":"Async Javascript"}},"pageContext":{"id":"87f37577-83a1-5997-bead-9b527887c708","slug":"/ausguck/async-javascript","title":"Async Javascript"}},"staticQueryHashes":[]}