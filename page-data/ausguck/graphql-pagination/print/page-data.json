{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/ausguck/graphql-pagination/print","result":{"data":{"deck":{"id":"24ad71a3-60d8-5556-a351-9c0708ba5bad","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = customTheme;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Head = makeShortcode(\"Head\");\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    mdxType: \"Head\"\n  }, mdx(\"title\", null, \"Graphql pagination\"), mdx(\"meta\", {\n    name: \"author\",\n    content: \"Marcel\"\n  })), mdx(\"h1\", null, \"Pagination with GraphQL and a postgres DB\"), mdx(\"p\", null, \"by Marcel Hoppe\\n(\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://twitter.com/m_hope5\"\n  }, \"twitter\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/Kampfheizung\"\n  }, \"github\"), \")\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Where do we come from?\"), mdx(\"img\", {\n    src: \"https://media.giphy.com/media/11PoCVGkSg46Iw/giphy.gif\"\n  }), mdx(\"hr\", null), mdx(\"h3\", null, \"Firestore to the rescue \\uD83D\\uDE80\"), mdx(\"hr\", null), mdx(\"img\", {\n    style: {\n      width: '70%'\n    },\n    src: \"https://media.giphy.com/media/Kx7Ramdh3yRmGlIt0W/giphy.gif\"\n  }), mdx(\"hr\", null), mdx(\"h3\", null, \"Postgres to the rescue \\uD83D\\uDE80\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Client side vs Server side pagination\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Client side pagination is better for\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Small data set\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Faster subsequent page loads\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sort & Filter requirements supported fully (unless results greater than max size)\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Server side pagination is better for\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Large data set\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Faster initial page load\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Complex view business logic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Resilience to concurrent changes\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Our starting point\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Large data set\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Complex business logic\")), mdx(\"hr\", null), mdx(\"h3\", null, \"So let's start with server side pagination but how to paginate on the server?\"), mdx(\"img\", {\n    style: {\n      width: '70%'\n    },\n    src: \"https://media.giphy.com/media/FxufOs6bQwxO0/giphy.gif\"\n  }), mdx(\"hr\", null), mdx(\"h3\", null, \"Implement the GraphQL Cursor Connection specification from Relay\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://relay.dev/graphql/connections.htm\"\n  }, \"https://relay.dev/graphql/connections.htm\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Forward pagination\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"first\"), \": takes a non-negative integer\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"after\"), \": takes the cursor type as described in the cursor field section\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"{\\n    friends(first: 2, after: \\\"uniqueCursor\\\") {\\n        totalCount\\n        edges {\\n            node {\\n                name\\n            }\\n            cursor\\n        }\\n        pageInfo {\\n            endCursor\\n            hasNextPage\\n        }\\n    }\\n}\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Backwards pagination\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"last\"), \": takes a non-negative integer\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"before\"), \": takes the cursor type as described in the cursor field section\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-graphql\"\n  }, \"{\\n    friends(last: 2, before: \\\"uniqueCursor\\\") {\\n        totalCount\\n        edges {\\n            node {\\n                name\\n            }\\n            cursor\\n        }\\n        pageInfo {\\n            endCursor\\n            hasPreviousPage\\n        }\\n    }\\n}\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Example Dataset (Software Engineers \\uD83D\\uDC69\\uD83C\\uDFFD\\u200D\\uD83D\\uDCBB)\"), mdx(\"table\", {\n    style: {\n      width: '200px'\n    }\n  }, mdx(\"thead\", null, mdx(\"th\", null, \"id\"), mdx(\"th\", null, \"name\")), mdx(\"tbody\", null, mdx(\"tr\", null, mdx(\"td\", null, \"1\"), mdx(\"td\", null, \"alice\")), mdx(\"tr\", null, mdx(\"td\", null, \"2\"), mdx(\"td\", null, \"franci\")), mdx(\"tr\", null, mdx(\"td\", null, \"3\"), mdx(\"td\", null, \"angelina\")), mdx(\"tr\", null, mdx(\"td\", null, \"4\"), mdx(\"td\", null, \"ornella\")), mdx(\"tr\", null, mdx(\"td\", null, \"5\"), mdx(\"td\", null, \"cruella\")), mdx(\"tr\", null, mdx(\"td\", null, \"6\"), mdx(\"td\", null, \"pauline\")), mdx(\"tr\", null, mdx(\"td\", null, \"7\"), mdx(\"td\", null, \"frederique\")), mdx(\"tr\", null, mdx(\"td\", null, \"8\"), mdx(\"td\", null, \"bet\\xFCl\")), mdx(\"tr\", null, mdx(\"td\", null, \"9\"), mdx(\"td\", null, \"weiping\")), mdx(\"tr\", null, mdx(\"td\", null, \"10\"), mdx(\"td\", null, \"alex\")))), mdx(\"hr\", null), mdx(\"h3\", null, \"How to resolve forward pagination?\"), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"first: 2\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"after: 6\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \"SELECT name\\nFROM friends\\nWHERE id > 6\\nORDER BY id ASC\\nLIMIT 3;\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Question time\"), mdx(\"p\", null, \"Why \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"LIMIT 3\"), \"?\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Answer\"), mdx(\"p\", null, \"For \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hasNextPage\"), \" we need to know if we have another item on the next page\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"return {\\n    totalCount: friends.length - 1,\\n    edges: friends.slice(0, -1).map(friend => (\\n        { cursor: friend.id, node: { name: friend.name } }\\n    )),\\n    pageInfo: {\\n        endCursor: friends[-1].id\\n        hasNextPage: friends.length > args.first\\n    }\\n}\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n    \\\"data\\\": {\\n        \\\"friend\\\": {\\n            \\\"totalCount\\\": \\\"2\\\",\\n            \\\"edges\\\": [\\n                {\\n                    \\\"node\\\": {\\n                        \\\"name\\\": \\\"frederique\\\"\\n                    },\\n                    \\\"cursor\\\": 7\\n                },\\n                {\\n                    \\\"node\\\": {\\n                        \\\"name\\\": \\\"bet\\xFCl\\\"\\n                    },\\n                    \\\"cursor\\\": 8\\n                }\\n            ],\\n            \\\"pageInfo\\\": {\\n                \\\"endCursor\\\": 8,\\n                \\\"hasNextPage\\\": true\\n            }\\n        }\\n    }\\n}\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"How to resolve backward pagination?\"), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"last: 2\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"before: 6\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"offset\"), \": cursor - last - 1\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sql\"\n  }, \"SELECT name\\nFROM friends\\nWHERE id < 6\\nORDER BY id ASC\\nLIMIT 3\\nOFFSET 3;\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Question time\"), mdx(\"p\", null, \"What if i have uuid's instead of incremental id's?\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Answer\"), mdx(\"p\", null, \"Use the window function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"row_number()\"), \" from postgresql to simulate an incremental id besides the uuids\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"return {\\n    totalCount: friends.length - 1,\\n    edges: friends.slice(1).map(friend => (\\n        { cursor: friend.id, node: { name: friend.name } }\\n    )),\\n    pageInfo: {\\n        endCursor: friends[-1].id\\n        hasPreviousPage: friends.length > args.last\\n    }\\n}\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n    \\\"data\\\": {\\n        \\\"friend\\\": {\\n            \\\"totalCount\\\": \\\"2\\\",\\n            \\\"edges\\\": [\\n                {\\n                    \\\"node\\\": {\\n                        \\\"name\\\": \\\"ornella\\\"\\n                    },\\n                    \\\"cursor\\\": 4\\n                },\\n                {\\n                    \\\"node\\\": {\\n                        \\\"name\\\": \\\"cruella\\\"\\n                    },\\n                    \\\"cursor\\\": 5\\n                }\\n            ],\\n            \\\"pageInfo\\\": {\\n                \\\"endCursor\\\": 5,\\n                \\\"hasPreviousPage\\\": true\\n            }\\n        }\\n    }\\n}\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Challenges that we mastered\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Custom ordering of columns\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Filtering\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"UUID's instead of numbered id's\")), mdx(\"hr\", null), mdx(\"p\", null, \"Hit me if you have any questions or need help \\uD83D\\uDE42\"), mdx(\"p\", null, \"Thanks for your patience\"), mdx(\"img\", {\n    src: \"https://media.giphy.com/media/m9eG1qVjvN56H0MXt8/giphy.gif\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","title":"Pagination with GraphQL and a postgres DB"}},"pageContext":{"id":"24ad71a3-60d8-5556-a351-9c0708ba5bad","slug":"/ausguck/graphql-pagination","title":"Pagination with GraphQL and a postgres DB"}},"staticQueryHashes":[]}