{
    "componentChunkName": "component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js",
    "path": "/ausguck/imperative-vs-declarative/print",
    "result": {"data":{"deck":{"id":"49cd785d-103f-5494-9054-8b8b9f9df019","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = customTheme;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Head = makeShortcode(\"Head\");\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    mdxType: \"Head\"\n  }, mdx(\"title\", null, \"Imperativ vs Deklarativ\")), mdx(\"h1\", null, \"Imperativ vs Deklarativ\"), mdx(\"p\", null, \"by Henrik Wenz\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Die deklarative Programmierung ist ein Programmierparadigma, bei dem die Beschreibung des Problems im Vordergrund steht.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Wie (imperativ) vs. Was (deklarativ)\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Ziel\"), mdx(\"h2\", null, \"Trennung von Arbeits- und Steuermechanismus\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Beispiel 1\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Gehe in die K\\xFCche\\n\\xD6ffne den K\\xFChlschrank\\nNimm ein Kaltgetr\\xE4nk\\nSchlie\\xDFe den K\\xFChlschrank\\nStell mir dieses Kaltgetr\\xE4nk hin\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Ich will ein Kaltgetr\\xE4nk\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Beispiel 2 (imperativ)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const zahlen = [1,2,3,4,5]\\nconst verdoppelt = []\\n\\nfor(let i = 0; i < zahlen.length; i++) {\\n  const neueZahl = zahlen[i] * 2\\n  verdoppelt.push(neueZahl)\\n}\\n\\nconsole.log(verdoppelt)\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Beispiel 2 (deklarativ)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const zahlen = [1,2,3,4,5]\\n\\nconst verdoppelt = zahlen.map((n) => n * 2)\\n\\nconsole.log(verdoppelt)\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Beispiel 3 (imperativ)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const container = document.getElementById('container');\\nconst btn = document.createElement('button');\\nbtn.className = 'btn red';\\nbtn.onclick = function(event) {\\n if (this.classList.contains('red')) {\\n   this.classList.remove('red');\\n   this.classList.add('blue');\\n } else {\\n   this.classList.remove('blue');\\n   this.classList.add('red');\\n }\\n};\\ncontainer.appendChild(btn);\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Beispiel 3 (deklarativ)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const Button = () => {\\n  const [color, setColor] = useState('red')\\n  return (\\n    <button\\n      className={`btn`}\\n      onClick={(event) => setColor(color === 'red' ? 'blue' : 'red')}\\n    />\\n  )\\n}\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Beispiel 4 (next.js)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const Link = withRouter(({ href, router }) => {\\n  const handleClick = (event) => {\\n    event.preventDefault()\\n    router.push(href)\\n  }\\n  return (\\n    <a href={href} onClick={handleClick}>\\n      {children}\\n    </a>\\n  )\\n})\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Beispiel 4 (next.js)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const App => () => (\\n  <div>\\n    <Link href='/about'>about</Link>\\n  </div>\\n)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","title":"Imperativ vs Deklarativ"}},"pageContext":{"id":"49cd785d-103f-5494-9054-8b8b9f9df019","slug":"/ausguck/imperative-vs-declarative","title":"Imperativ vs Deklarativ"}},
    "staticQueryHashes": []}