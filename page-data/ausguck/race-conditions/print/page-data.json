{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/ausguck/race-conditions/print","result":{"data":{"deck":{"id":"fe863ca3-1058-5268-840d-b086800764bf","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = customTheme;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Head = makeShortcode(\"Head\");\nvar Image = makeShortcode(\"Image\");\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    mdxType: \"Head\"\n  }, mdx(\"title\", null, \"Race Conditions\")), mdx(\"h1\", null, \"Race Conditions\"), mdx(\"p\", null, \"Max Str\\xFCbing\\n(\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://twitter.com/mxstrbng\"\n  }, \"twitter\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/mstruebing\"\n  }, \"github\"), \")\"), mdx(\"hr\", null), mdx(\"p\", null, \"What exactly is a race condition?\"), mdx(\"hr\", null), mdx(\"p\", null, \"A race condition occurs when two or more threads can access shared data and they try to change it at the same time.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Synchronous\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Thread 1\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Thread 2\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Value\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"read\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\u2190\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"increase\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"write\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\u2192\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"read\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\u2190\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"increase\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"write\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\u2192\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"2\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"Asynchronous\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Thread 1\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Thread 2\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Value\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"read\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\u2190\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"read\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\u2190\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"increase\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"increase\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"write\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\u2192\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"write\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"\\u2192\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"1\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"Example of a linked list\"), mdx(\"hr\", null), mdx(\"p\", null, \"Refresher on Linkedlists:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Node {\\n    value\\n    *next\\n}\\n\")), mdx(Image, {\n    style: {\n      width: '1000px',\n      backgroundSize: 'contain'\n    },\n    src: singlyLinkedList,\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(\"p\", null, \"We want to remove two items from a linked list\"), mdx(\"hr\", null), mdx(Image, {\n    src: linkedList1,\n    style: {\n      backgroundSize: 'auto'\n    },\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(Image, {\n    src: linkedList1,\n    style: {\n      backgroundSize: 'auto'\n    },\n    mdxType: \"Image\"\n  }), mdx(Image, {\n    src: linkedList2,\n    style: {\n      backgroundSize: 'auto'\n    },\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(Image, {\n    src: linkedList1,\n    style: {\n      backgroundSize: 'auto'\n    },\n    mdxType: \"Image\"\n  }), mdx(Image, {\n    src: linkedList2,\n    style: {\n      backgroundSize: 'auto'\n    },\n    mdxType: \"Image\"\n  }), mdx(Image, {\n    src: linkedList3,\n    style: {\n      backgroundSize: 'auto'\n    },\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"Solution: Locks\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"if (x == 5) {\\n   // If another thread changed x in between\\n   // \\\"if (x == 5)\\\" and \\\"y = x * 2\\\" above,\\n   // y will not be equal to 10.\\n   y = x * 2;\\n}\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"// Obtain lock for x\\nif (x == 5) {\\n   // Now, nothing can change x until the lock is released.\\n   // Therefore y = 10\\n   y = x * 2;\\n}\\n// release lock for x\\n\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"C\"), \" there is: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mlock(*address, length)\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mlockall(flags)\"), \"\\nas well as corresponding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"munlock\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"munlockall\"), \".\\nMore modern languages like Rust for example doesn't need this.\"), mdx(\"hr\", null), mdx(\"p\", null, \"This can also affect javascript with async code, a solution for this would be\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/async-lock\"\n  }, \"async-lock\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"redis.get('key', function(err, value) {\\n    redis.set('key', value * 2);\\n});\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"user1: redis.get('key') -> 1\\nuser2: redis.get('key') -> 1\\nuser1: redis.set('key', 1 x 2) -> 2\\nuser2: redis.set('key', 1 x 2) -> 2\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"var AsyncLock = require('async-lock');\\nvar lock = new AsyncLock();\\n\\nconst multiplyValueFromRedis = async (key, callback) => {\\n    lock.acquire(key, () => {\\n    // no other can obtain the same lock at the same time\\n        redis.get(key, (err, value) => {\\n            redis.set(key, value * 2, callback);\\n        });\\n    }, (err, ret) => {\\n    // do something when no lock can be obtained\\n    });\\n}\\n\\nawait myAsyncFunc();\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"Some Links:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.wikipedia.org/wiki/Race_condition\"\n  }, \"https://en.wikipedia.org/wiki/Race_condition\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://linux.die.net/man/2/mlock\"\n  }, \"https://linux.die.net/man/2/mlock\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.npmjs.com/package/async-lock\"\n  }, \"https://www.npmjs.com/package/async-lock\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Thank you\"));\n}\n;\nMDXContent.isMDXComponent = true;","title":"Race Conditions"}},"pageContext":{"id":"fe863ca3-1058-5268-840d-b086800764bf","slug":"/ausguck/race-conditions","title":"Race Conditions"}},"staticQueryHashes":[]}