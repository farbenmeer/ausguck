{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/decks/reduxjs","matchPath":"/decks/reduxjs/*","result":{"data":{"deck":{"id":"256d9e4f-c395-51f3-ae12-5f4a72111ee2","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = customTheme;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Head = makeShortcode(\"Head\");\nvar Image = makeShortcode(\"Image\");\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    mdxType: \"Head\"\n  }, mdx(\"title\", null, \"Redux\"), mdx(\"meta\", {\n    name: \"author\",\n    content: \"Max Str\\xFCbing\"\n  })), mdx(\"h1\", null, \"Redux!\"), mdx(\"p\", null, \"by Max Str\\xFCbing\\n(\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/mxstrbng\"\n  }), \"twitter\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/mstruebing\"\n  }), \"github\"), \")\"), mdx(\"hr\", null), mdx(\"p\", null, \"What is Redux?\"), mdx(\"hr\", null), mdx(\"p\", null, \"\\\"Redux is a predictable state container for JavaScript apps.\\\"\\n(official redux documentation)\"), mdx(\"hr\", null), mdx(\"p\", null, \"Holds your overall application state\"), mdx(\"hr\", null), mdx(\"p\", null, \"Single source of truth\"), mdx(\"hr\", null), mdx(\"p\", null, \"Predictable, synchronous data flow\"), mdx(\"hr\", null), mdx(\"p\", null, \"Offers a pure, functional way to manipulate the state\"), mdx(\"hr\", null), mdx(\"p\", null, \"Easy testing\"), mdx(\"hr\", null), mdx(\"p\", null, \"integrates well in react (and other view libraries as I've heard)\"), mdx(\"hr\", null), mdx(\"p\", null, \"Inspired by Elm (it is in fact the Elm-Architecture)\"), mdx(\"hr\", null), mdx(Image, {\n    src: redux,\n    style: {\n      maxWidth: '50%',\n      maxHeight: '50%'\n    },\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"store\"), \" contains the application state\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"{\\n  todos: ['Learn Redux', 'Drink Beer'];\\n}\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"An \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"action\"), \" defines what and how a part of the store should be changed\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"{\\n  type: 'ADD_TODO';\\n  payload: 'Learn Redux';\\n}\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"reducer\"), \" takes an action and the current state and produces a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"new\")), \" state\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const reducer = (state = initialState, action) => {\\n  switch (action.type) {\\n    case 'ADD_TODO':\\n      return {\\n        todos: [...state.todos, action.payload],\\n      };\\n    default:\\n      return state;\\n  }\\n};\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"How to integrate that store thingy with react?\"), mdx(\"img\", {\n    src: \"https://media.giphy.com/media/cMVgEhDeKzPwI/giphy.gif\"\n  }), mdx(\"hr\", null), mdx(\"p\", null, \"Boilerplate\"), mdx(\"img\", {\n    src: \"https://media.giphy.com/media/MRqaXgJUl9fGE1PSy6/giphy.gif\"\n  }), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import {Provider} from 'react-redux';\\nimport {createStore} from 'redux';\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const initialState = {todos: []};\\n\\nconst reducer = (state = initialState, action) => {\\n  switch (action.type) {\\n    case 'ADD_TODO':\\n      return {todos: [...state.todos, action.payload]};\\n    default:\\n      return state;\\n  }\\n};\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const store = createStore(reducer);\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const App = () => (\\n  <Provider store={store}>\\n    <MyComponent />\\n  </Provider>\\n);\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"Connect your component \\\\o/\"), mdx(\"img\", {\n    src: \"https://media.giphy.com/media/5GoVLqeAOo6PK/giphy.gif\"\n  }), mdx(\"hr\", null), mdx(\"p\", null, \"Use the state\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import {connect} from 'react-redux';\\n\\nclass MyClass extends React.PureComponent {\\n  // some cool code\\n  render() {\\n    return (\\n      <ul>\\n        {this.props.todos.map(todo => (\\n          <li>{todo}</li>\\n        ))}\\n      </ul>\\n    );\\n  }\\n}\\n\\nconst mapStateToProps = state => {\\n  return {\\n    todos: state.todos,\\n  };\\n};\\n\\nexport default connect(mapStateToProps)(MyClass);\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"Dispatch an action\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"class MyClass extends React.PureComponent {\\n  doStuff() {\\n    this.props.dispatch({\\n      type: 'ADD_TODO',\\n      payload: 'Learn Redux',\\n    });\\n  }\\n  render() {\\n    return <div>{this.props.count}</div>;\\n  }\\n}\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Demo\"), mdx(\"img\", {\n    src: \"https://media.giphy.com/media/YQitE4YNQNahy/giphy.gif\"\n  }), mdx(\"h2\", null, \"(see code on Github: \", mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"https://github.com/mstruebing/redux-example\"\n  }), \"https://github.com/mstruebing/redux-example\"), \")\"), mdx(\"p\", null, \"What about side effects?\"), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/reduxjs/redux-thunk\"\n  }), \"redux-thunk\")), mdx(\"hr\", null), mdx(\"p\", null, \"A middleware which can call side effects before invoking \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dispatch\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// other action creaters ...\\nconst incrementAsync() {\\n  return (dispatch) => {\\n    setTimeout(() => {\\n      // Yay! Can invoke sync or async actions with `dispatch`\\n      dispatch(increment());\\n    }, 1000);\\n  };\\n}\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"npm install redux-thunk\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { createStore, applyMiddleware } from 'redux';\\nimport thunk from 'redux-thunk';\\nimport reducer from './reducers';\\n\\nconst store = createStore(reducer, applyMiddleware(thunk));\\n\")), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/redux-saga/redux-saga\"\n  }), \"redux-saga\")), mdx(\"hr\", null), mdx(\"p\", null, \"Uses generator functions and hooks between the reducer and actions\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function* mySaga() {\\n  // there are also some other takers\\n  yield takeEvery(\\\"MY_ACTION\\\", mySideEffect);\\n}\\n\\nfunction* mySideEffect(action) {\\n   try {\\n      const user = yield call(Api.doHttpRequest, action.payload.somePayload);\\n      yield put({type: \\\"HTTP_REQUEST_SUCCEEDED\\\", payload: payload});\\n   } catch (e) {\\n      yield put({type: \\\"HTTP_REQUEST_FAILED\\\", message: e.message});\\n   }\\n}\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"npm install --save redux-saga\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { createStore, applyMiddleware } from 'redux'\\nimport createSagaMiddleware from 'redux-saga'\\n\\nimport reducer from './reducers'\\nimport mySaga from './sagas'\\n\\n// create the saga middleware\\nconst sagaMiddleware = createSagaMiddleware()\\n// mount it on the Store\\nconst store = createStore(\\n  reducer,\\n  applyMiddleware(sagaMiddleware)\\n)\\n\\n// then run the saga\\nsagaMiddleware.run(mySaga)\\n\\n// render the application\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"THX!!11\"), mdx(\"img\", {\n    src: \"https://media.giphy.com/media/3oEdva9BUHPIs2SkGk/giphy.gif\"\n  }), mdx(\"hr\", null), mdx(\"p\", null, \"resources:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://redux.js.org/\"\n  }), \"official redux documentation\")));\n}\n;\nMDXContent.isMDXComponent = true;","title":"Redux!"}},"pageContext":{"matchPath":"/decks/reduxjs/*","id":"256d9e4f-c395-51f3-ae12-5f4a72111ee2","slug":"/ausguck/decks/reduxjs","title":"Redux!"}},"staticQueryHashes":[]}