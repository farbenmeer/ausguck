{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/decks/solid/print","result":{"data":{"deck":{"id":"039d45e1-13a9-5bd3-9878-3023de0564fd","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = customTheme;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Head = makeShortcode(\"Head\");\nvar Image = makeShortcode(\"Image\");\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    mdxType: \"Head\"\n  }, mdx(\"title\", null, \"SOLID Principle\"), mdx(\"meta\", {\n    name: \"author\",\n    content: \"Marcel Hoppe\"\n  })), mdx(\"h1\", null, \"SOLID Principle\"), mdx(\"p\", null, \"by Marcel Hoppe\\n(\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/m_hope5\"\n  }), \"twitter\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Kampfheizung\"\n  }), \"github\"), \")\"), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"S\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"O\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"L\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"I\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"D\")), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"S\"), \" ingle Responsibility Principle\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"O\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"L\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"I\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"D\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Single Responsibility Principle\"), mdx(\"p\", null, \"A class should take care of a Single Responsibility\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Single Responsibility Principle\"), mdx(\"p\", null, \"Bad example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"class Customer\\n  def add(db)\\n    begin\\n      db.add();\\n    rescue StandardError => e\\n      File.open('error.txt', r) do |file|\\n        file.puts e.message\\n      end\\n  end\\nend\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Single Responsibility Principle\"), mdx(\"p\", null, \"Good example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"class Customer\\n  def add(db)\\n    begin\\n      db.add();\\n    rescue StandardError => e\\n      logger.handle(e.message)\\n  end\\n\\n  private\\n\\n  def logger\\n    FileLogger.new\\n  end\\nend\\n\\nclass FileLogger\\n  def handle(text)\\n    File.open('error.txt', r) do |file|\\n      file.puts text\\n    end\\n  end\\nend\\n\")), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"S\"), \" ingle Responsibility Principle\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"O\"), \" pen for Extension Closed for Modification\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"L\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"I\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"D\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Open for Extension Closed for Modification\"), mdx(\"p\", null, \"Prefer extension over modification\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Open for Extension Closed for Modification\"), mdx(\"p\", null, \"Bad example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"class Customer\\n  attr_accessor :type\\n\\n  def initialize(type)\\n    @type = type\\n  end\\n\\n  def add(db)\\n    if (@type == 0)\\n      db.add();\\n    else\\n      db.addExistingCustomer();\\n    end\\n  end\\nend\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Open for Extension Closed for Modification\"), mdx(\"p\", null, \"Good example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"class Customer\\n  def add(db)\\n    db.add();\\n  end\\nend\\n\\nclass ExistingCustomer < Customer\\n  def add(db)\\n    db.addExistingCustomer();\\n  end\\nend\\n\")), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"S\"), \" ingle Responsibility Principle\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"O\"), \" pen for Extension Closed for Modification\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"L\"), \" iskov Substitution Principle\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"I\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"D\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Liskov Substitution Principle\"), mdx(\"p\", null, \"The parent class should be able to refer child objects seamlessly during runtime polymorphism.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Liskov Substitution Principle\"), mdx(\"p\", null, \"Bad example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"class Human\\n  def talk\\n    'Foo'\\n  end\\n\\n  def height\\n    '2.80m'\\n  end\\nend\\n\\nclass HomoSapiens < Human\\n  def talk\\n    'Hello!'\\n  end\\n\\n  def height\\n    { men: '1.70m', women: '1.62' }\\n  end\\nend\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Liskov Substitution Principle\"), mdx(\"p\", null, \"Good example\"), mdx(\"p\", null, \"if it looks like a duck and quacks like a duck, it's a duck\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"class HomoSapiens < Human\\n  def talk\\n    'Hello!'\\n  end\\n\\n  def height\\n    '1.70m'\\n  end\\nend\\n\")), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"S\"), \" ingle Responsibility Principle\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"O\"), \" pen for Extension Closed for Modification\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"L\"), \" iskov Substitution Principle\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"I\"), \" nterface Segregation Principle\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"D\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Interface Segregation Principle\"), mdx(\"p\", null, \"A client should not be forced to use an interface, if it doesn\\u2019t need it.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Interface Segregation Principle\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"class FeeCalculator\\n  def calculate(product, user, vat)\\n    # calculation\\n  end\\nend\\n\\nclass ProductController\\n  def show\\n    @fee = FeeCalculator.new.calculate(product, user, vat)\\n  end\\nend\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Interface Segregation Principle\"), mdx(\"p\", null, \"Bad example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"class FeeCalculator\\n  def calculate(product, user, vat, save_result)\\n    # calculation\\n\\n    if save_result\\n      # storing result into db\\n    end\\n  end\\nend\\n\\nclass ProductController\\n  def show\\n    @fee = FeeCalculator.new.calculate(product, user, vat, false)\\n  end\\nend\\n\\nclass OrderController\\n  def create\\n    @fee = FeeCalculator.new.calculate(product, user, vat, true)\\n  end\\nend\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Interface Segregation Principle\"), mdx(\"p\", null, \"Good Example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"class FeeCalculator\\n  def calculate(product, user, vat)\\n    # calculation\\n  end\\n\\n  def save(fee)\\n    # storing result into db\\n  end\\nend\\n\\nclass ProductController\\n  def show\\n    @fee = fee_calculator.calculate(product, user, vat)\\n  end\\n\\n  private\\n\\n  def fee_calculator\\n    FeeCalculator.new\\n  end\\nend\\n\\nclass OrderController\\n  def create\\n    fee = fee_calculator.calculate(product, user, vat)\\n    fee_calculator.save(fee)\\n  end\\n\\n  private\\n\\n  def fee_calculator\\n    FeeCalculator.new\\n  end\\nend\\n\")), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"S\"), \" ingle Responsibility Principle\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"O\"), \" pen for Extension Closed for Modification\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"L\"), \" iskov Substitution Principle\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"I\"), \" nterface Segregation Principle\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"D\"), \" ependency Inversion\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Dependency Inversion\"), mdx(\"p\", null, \"High level modules should not depend on low-level modules, but should depend on abstraction.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Dependency Inversion\"), mdx(Image, {\n    src: domainDrivenHexagon,\n    style: {\n      backgroundSize: 'auto'\n    },\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"Dependency Inversion\"), mdx(\"p\", null, \"Bad example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"class UserRepository\\n  def all\\n    User.all\\n  end\\n\\n  def find(id:)\\n    User.find(id)\\n  end\\nend\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Dependency Inversion\"), mdx(\"p\", null, \"Good example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ruby\"\n  }), \"class UserRepository\\n  def initialize(data_source:)\\n    @data_source = data_source\\n  end\\n\\n  def all\\n    data_source.all\\n  end\\n\\n  def find(id:)\\n    data_source.find(id)\\n  end\\n\\n  private\\n\\n  attr_reader :data_source\\nend\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"Thank you for listening! You're awesome!\"));\n}\n;\nMDXContent.isMDXComponent = true;","title":"SOLID Principle"}},"pageContext":{"id":"039d45e1-13a9-5bd3-9878-3023de0564fd","slug":"/decks/solid","title":"SOLID Principle"}},"staticQueryHashes":[]}