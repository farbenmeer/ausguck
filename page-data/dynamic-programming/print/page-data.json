{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/dynamic-programming/print","result":{"data":{"deck":{"id":"c2d0ad54-22a5-5c77-b603-eb06591dad22","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = customTheme;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Head = makeShortcode(\"Head\");\nvar Image = makeShortcode(\"Image\");\nvar Steps = makeShortcode(\"Steps\");\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    mdxType: \"Head\"\n  }, mdx(\"title\", null, \"Dynamic Programming\")), mdx(\"h1\", null, \"Dynamic Programming\"), mdx(\"p\", null, \"by Max Str\\xFCbing\\n(\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/mxstrbng\"\n  }), \"twitter\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/mstruebing\"\n  }), \"github\"), \")\"), mdx(\"hr\", null), mdx(\"p\", null, \"Makes your algorithm more efficient by storing intermediate results.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Now, as always: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FIBONACCI\")), mdx(\"hr\", null), mdx(\"p\", null, \"f(0) = 0\\nf(1) = 1\"), mdx(\"p\", null, \"f(n) = f(n-1) + f(n-2)\"), mdx(\"hr\", null), mdx(\"p\", null, \"(0) 1 1 2 3 5 8 13 21 ...\"), mdx(\"hr\", null), mdx(\"p\", null, \"Recursive approach:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const fib = n => {\\n    if (n < 2) {\\n        return n;\\n    }\\n\\n    return fib(n-1) + fib(n-2);\\n}\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"fib(5) // 5\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"Computation\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"fib(5)\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"fib(5)\\nfib(4) + fib(3)\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"fib(5)\\nfib(4) + fib(3)\\n(fib(3) + fib(2)) + (fib(2) + fib(1))\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"fib(5)\\nfib(4) + fib(3)\\n(fib(3) + fib(2)) + (fib(2) + fib(1))\\n((fib(2) + fib(1)) + (fib(1) + fib(0))) + ((fib(1) + fib(0)) + fib(1))\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"fib(5)\\nfib(4) + fib(3)\\n(fib(3) + fib(2)) + (fib(2) + fib(1))\\n((fib(2) + fib(1)) + (fib(1) + fib(0))) + ((fib(1) + fib(0)) + fib(1))\\n\\n(((fib(1) + fib(0)) + fib(1)) + (fib(1) + fib(0))) + ((fib(1) + fib(0)) + fib(1))\\n\")), mdx(\"hr\", null), mdx(Image, {\n    src: fib5Recursive,\n    style: {\n      backgroundSize: 'auto'\n    },\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(\"p\", null, \"we calculate:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"3 times \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fib(0)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"5 times \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fib(1)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"3 times \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fib(2)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"2 times \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fib(3)\"))), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"O(2^n)\\n\\nfib(n) = fib(n-1) + fib(n-2)\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"We often recalculate already calculated results.\"), mdx(\"hr\", null), mdx(\"p\", null, \"We often recalculate already calculated results.\\nWhy not store these intermediate results we already computed?\"), mdx(\"hr\", null), mdx(\"p\", null, \"Memoization\"), mdx(\"hr\", null), mdx(\"p\", null, \"Passing an array with already calculated results as a parameter.\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const fibMemoized = (n, memo = []) => {\\n  if (n < 2) {\\n    return n;\\n  }\\n\\n  if (n in memo) {\\n    return memo[n];\\n  }\\n\\n  result = fibMemoized(n-1, memo) + fibMemoized(n-2, memo);\\n  memo[n] = result;\\n\\n  return result;\\n};\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"fib(5) // 5\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"Computation:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"fib(5)\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"fib(5)\\nfib(4) + fib(3)\\n(fib(3) + fib(2)) + (fib(2) + fib(1))\\n((fib(2) + fib(1)) + (fib(1) + fib(0))) + ((fib(1) + fib(0)) + fib(1))\\n\\n(((fib(1) + fib(0)) + fib(1)) + (fib(1)+ fib(0))) + ((fib(1)+ fib(0)) + fib(1))\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"fib(5)\\nfib(4) + fib(3)(cache)\\n(fib(3) + fib(2)(cache)) + (fib(2)(cache) + fib(1)(cache))\\n((fib(2) + fib(1)(cache)) + (fib(1)(cache) + fib(0)(cache))) + ((fib(1)(cache) + fib(0)(cache)) + fib(1)(cache))\\n\\n(((fib(1) + fib(0)) + fib(1)(cache)) + (fib(1)(cache) + fib(0)(cache))) + ((fib(1)(cache) + fib(0)(cache)) + fib(1)(cache))\\n\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"O(n)\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"Bottom up:\"), mdx(\"hr\", null), mdx(\"p\", null, \"No recursion, just a loop.\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const fib = n => {\\n    if (n < 2) {\\n        return n;\\n    }\\n\\n    const bottom = [];\\n    bottom[1] = 0;\\n    bottom[2] = 1;\\n\\n    for (let i = 3; i <= n; i++) {\\n        bottom[i] = bottom[i-1] + bottom[i-2];\\n    }\\n\\n    return bottom[n];\\n}\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"Same Computation as memoized but:\"), mdx(Steps, {\n    mdxType: \"Steps\"\n  }, mdx(\"p\", null, \"  => less function calls\"), mdx(\"p\", null, \"  => less overhead\"), mdx(\"p\", null, \"  => less computation power needed\"), mdx(\"p\", null, \"  => faster.\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const targetFib = 10;\\n\\nconsole.time('recursive took');\\nconsole.log(`recursive result: ${fibRecursive(targetFib)}`);\\nconsole.timeEnd('recursive took');\\nconsole.log();\\n\\nconsole.time('memoized took');\\nconsole.log(`memoized result: ${fibMemoized(targetFib)}`);\\nconsole.timeEnd('memoized took');\\nconsole.log();\\n\\nconsole.time('bottom up took');\\nconsole.log(`bottom up result: ${fibBottomUp(targetFib)}`);\\nconsole.timeEnd('bottom up took');\\nconsole.log();\\n\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ node fib.js\\nrecursive result: 55\\nrecursive took: 1.662ms\\n\\nmemoized result: 55\\nmemoized took: 0.160ms\\n\\nbottom up result: 55\\nbottom up took: 0.084ms\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"Let us change the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"targetFib\"), \" to 45.\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ node fib.js\\nrecursive result: 1134903170\\nrecursive took: 17593.078ms\\n\\nmemoized result: 1134903170\\nmemoized took: 0.254ms\\n\\nbottom up result: 1134903170\\nbottom up took: 0.093ms\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"We can see that the recursive approach took 17.5 seconds and the other ones doesn't even need a second to finish their computation.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Dynamic Programming\"), mdx(\"hr\", null), mdx(\"p\", null, \"Dynamic Programming\"), mdx(\"p\", null, \"Is an optimization over plain recursion.\\nIf the recursion often evaluates the same function calls you could store the results of these function calls and access them when needed instead of recalculating them everytime.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Dynamic Programming\"), mdx(\"p\", null, \"Is an optimization over plain recursion.\\nIf the recursion often evaluates the same function calls you could store the results of these function calls and access them when needed instead of recalculating them everytime.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Makes your algorithm more efficient by storing intermediate results.\")), mdx(\"hr\", null), mdx(\"p\", null, \"Some Links:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Dynamic_programming\"\n  }), \"https://en.wikipedia.org/wiki/Dynamic_programming\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Fibonacci_number\"\n  }), \"https://en.wikipedia.org/wiki/Fibonacci_number\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.geeksforgeeks.org/dynamic-programming/\"\n  }), \"https://www.geeksforgeeks.org/dynamic-programming/\"))), mdx(\"hr\", null), mdx(\"p\", null, \"Thank you\"));\n}\n;\nMDXContent.isMDXComponent = true;","title":"Dynamic Programming"}},"pageContext":{"id":"c2d0ad54-22a5-5c77-b603-eb06591dad22","slug":"/dynamic-programming","title":"Dynamic Programming"}},"staticQueryHashes":[]}